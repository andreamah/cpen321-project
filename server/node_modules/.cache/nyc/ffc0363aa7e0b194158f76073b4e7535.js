var cov_1ic6qc3q64=function(){var path="/home/segfault_r/project/server/passport.js",hash="2fb2a894870a5d46542272ffddd8592c43b1fd2e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/segfault_r/project/server/passport.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:2,column:20},end:{line:2,column:52}},"2":{start:{line:3,column:23},end:{line:3,column:46}},"3":{start:{line:4,column:22},end:{line:4,column:56}},"4":{start:{line:5,column:30},end:{line:5,column:64}},"5":{start:{line:6,column:15},end:{line:6,column:41}},"6":{start:{line:7,column:13},end:{line:7,column:37}},"7":{start:{line:10,column:0},end:{line:28,column:4}},"8":{start:{line:14,column:2},end:{line:27,column:3}},"9":{start:{line:16,column:17},end:{line:16,column:49}},"10":{start:{line:19,column:4},end:{line:21,column:5}},"11":{start:{line:20,column:6},end:{line:20,column:31}},"12":{start:{line:24,column:4},end:{line:24,column:21}},"13":{start:{line:26,column:4},end:{line:26,column:23}},"14":{start:{line:32,column:0},end:{line:59,column:4}},"15":{start:{line:36,column:2},end:{line:58,column:3}},"16":{start:{line:38,column:25},end:{line:38,column:74}},"17":{start:{line:39,column:4},end:{line:41,column:5}},"18":{start:{line:40,column:6},end:{line:40,column:38}},"19":{start:{line:44,column:20},end:{line:52,column:6}},"20":{start:{line:54,column:4},end:{line:54,column:25}},"21":{start:{line:55,column:4},end:{line:55,column:24}},"22":{start:{line:57,column:4},end:{line:57,column:38}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:3},end:{line:13,column:4}},loc:{start:{line:13,column:28},end:{line:28,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:3},end:{line:35,column:4}},loc:{start:{line:35,column:55},end:{line:59,column:1}},line:35}},branchMap:{"0":{loc:{start:{line:19,column:4},end:{line:21,column:5}},type:"if",locations:[{start:{line:19,column:4},end:{line:21,column:5}},{start:{line:19,column:4},end:{line:21,column:5}}],line:19},"1":{loc:{start:{line:39,column:4},end:{line:41,column:5}},type:"if",locations:[{start:{line:39,column:4},end:{line:41,column:5}},{start:{line:39,column:4},end:{line:41,column:5}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const passport=(cov_1ic6qc3q64.s[0]++,require('passport'));const JwtStrategy=(cov_1ic6qc3q64.s[1]++,require('passport-jwt').Strategy);const{ExtractJwt}=(cov_1ic6qc3q64.s[2]++,require('passport-jwt'));const LocalStrategy=(cov_1ic6qc3q64.s[3]++,require('passport-local').Strategy);const FacebookTokenStrategy=(cov_1ic6qc3q64.s[4]++,require('passport-facebook-token'));const config=(cov_1ic6qc3q64.s[5]++,require('./configuration'));const User=(cov_1ic6qc3q64.s[6]++,require('./models/user'));// JSON WEB TOKENS STRATEGY
cov_1ic6qc3q64.s[7]++;passport.use(new JwtStrategy({jwtFromRequest:ExtractJwt.fromHeader('authorization'),secretOrKey:config.JWT_SECRET},async(payload,done)=>{cov_1ic6qc3q64.f[0]++;cov_1ic6qc3q64.s[8]++;try{// Find the user specified in token
const user=(cov_1ic6qc3q64.s[9]++,await User.findById(payload.sub));// If user doesn't exists, handle it
cov_1ic6qc3q64.s[10]++;if(!user){cov_1ic6qc3q64.b[0][0]++;cov_1ic6qc3q64.s[11]++;return done(null,false);}else{cov_1ic6qc3q64.b[0][1]++;}// Otherwise, return the user
cov_1ic6qc3q64.s[12]++;done(null,user);}catch(error){cov_1ic6qc3q64.s[13]++;done(error,false);}}));cov_1ic6qc3q64.s[14]++;passport.use('facebookToken',new FacebookTokenStrategy({clientID:config.oauth.facebook.clientID,clientSecret:config.oauth.facebook.clientSecret},async(accessToken,refreshToken,profile,done)=>{cov_1ic6qc3q64.f[1]++;cov_1ic6qc3q64.s[15]++;try{const existingUser=(cov_1ic6qc3q64.s[16]++,await User.findOne({"facebook_id":profile.id}));cov_1ic6qc3q64.s[17]++;if(existingUser){cov_1ic6qc3q64.b[1][0]++;cov_1ic6qc3q64.s[18]++;return done(null,existingUser);}else{cov_1ic6qc3q64.b[1][1]++;}//create new user if user does not exist
const newUser=(cov_1ic6qc3q64.s[19]++,new User({name:profile.displayName,alias:profile.name.givenName,email:profile.emails[0].value,profile_photo_id:0,is_professor:false,reported:false,facebook_id:profile.id}));cov_1ic6qc3q64.s[20]++;await newUser.save();cov_1ic6qc3q64.s[21]++;done(null,newUser);}catch(error){cov_1ic6qc3q64.s[22]++;done(error,false,error.message);}}));// LOCAL STRATEGY
// passport.use(new LocalStrategy({
//   usernameField: 'email'
// }, async (email, password, done) => {
//   try {
//     // Find the user given the email
//     const user = await User.findOne({ "local.email": email });
//     // If not, handle it
//     if (!user) {
//       return done(null, false);
//     }
//     // Check if the password is correct
//     const isMatch = await user.isValidPassword(password);
//     // If not, handle it
//     if (!isMatch) {
//       return done(null, false);
//     }
//     // Otherwise, return the user
//     done(null, user);
//   } catch(error) {
//     done(error, false);
//   }
// }));